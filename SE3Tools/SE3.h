//This file is part of SE3 Tools.

//SE3 Tools is free software: you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.

//SE3 Tools is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License
//along with SE3 Tools.  If not, see <http://www.gnu.org/licenses/>.

#include <Eigen/Dense>
#include "SO3.h"

#if ( defined(WIN32) || defined( _WIN64 ) ) && defined( BUILD_SHARED_LIB )
#define EXPORT_SYM	_declspec(dllexport)
#else
#define EXPORT_SYM
#endif

/*!
 * \addtogroup SE3
 * @{
 */

/*!
 * In this documentation, group elements will be called \f$ g \in SE(3) \f$, and
 * elements of the corresponding Lie algebra (rigid body velocities or twists)
 * will be called \f$ \hat{\xi} \in se(3) \f$. In both cases these quantities are
 * represented in the space of 4 x 4 matrices, commonly called homogeneous transformation
 * matrices and twists for elements of SE(3) and se(3), respectively. Also used are the twist coordinate vectors
 * \f$ \xi \f$, which are related to the twists as follows:
 * \f[ \hat{\xi} = \begin{bmatrix} \hat{\omega} & v \\ 0 & 0 \end{bmatrix} \f]
 * \f[ \xi = \begin{bmatrix} v \\ \omega \end{bmatrix} \f]
 * where the hat over \f$ \hat{\omega} \f$ represents the conversion of a vector \f$ \omega \f$ to 
 * the matrix representation of the cross product, \f$ \omega \times x = \hat{\omega}x\f$. This operation
 * is explained in further detail in SO3::hat3 .
 *
 * SE(3) is formed by the semidirect product of \f$ \mathbb{R}^3 \f$, the translation group, and SO(3), the rotation group, with
 * the translations forming a normal subgroup, i.e. \f$ g*\mathbb{R}^3*g^{-1} \f$ is always a pure translation for any g in SE(3). So
 * every element \f$g\f$ of SE(3) is represented by an element of \f$ \mathbb{R}^3 \f$ together with an element of SO(3).
 * In the space of 4 x 4 matrices, the representation looks like
 * \f[
 *    g = (R,p) = \begin{bmatrix} R & p \\ 0 & 1 \end{bmatrix}
 * \f]
 */
namespace SE3 {
	//! 6-D vector type
	typedef Eigen::Matrix<double,6,1> Vector6d;
	
	/*!
	 * \brief Convert a 6 x 1 vector into the corresponding
	 *         Matrix representation of a twist. Inverse of vee6.
     *
	 * \param[in]	xi	The 6 x 1 vector, in the format \f[ \begin{bmatrix} v \\ \omega \end{bmatrix} \f]
	 * \return		xi^, the 4 x 4 matrix representation of a twist, given by coordinates in xi.
	 *				This matrix returned is \f[ \begin{bmatrix} \hat{\omega} & v \\ 0 & 0\end{bmatrix} \f].
	 */
	EXPORT_SYM Eigen::Matrix4d hat6(const Vector6d& xi);

	/*!
	 * \brief Convert a matrix representation of a twist
	 *         Into the 6 x 1 vector of twist coordinates. Inverse of hat6.
	 * \param[in]	XiHat	The 4 x 4 twist matrix, in the format \f[ \begin{bmatrix} \hat{\omega} & v \\ 0 & 0 \end{bmatrix} \f].
	 * \return      xi		A 6 x 1 vector, in the format \f[ \begin{bmatrix} v \\ \omega \end{bmatrix} \f]
	 */
	EXPORT_SYM Vector6d vee6(const Eigen::Matrix4d& XiHat);

	/*!
	 * \brief The exponential map, specialized for se(3) -> SE(3)
	 *
	 * This method implements the matrix exponential. It takes 4 x 4 twist matrices,
	 * which represent the Lie algebra se(3) in the space of 4 x 4 matrices, and computes
	 * \f$ \exp \hat{\xi} \f$, which is a 4 x 4 homogeneous transformation matrix (representation of SE(3)). 
	 * The exponential map is surjective, that is, every element of SE(3) can be generated by some element of
	 * se(3). It is not injective, meaning that there are many inputs that generate the same output.
	 *
	 * \param[in]	XiHat	The 4 x 4 twist matrix, in the format \f[ \begin{bmatrix} \hat{\omega} & v \\ 0 & 0 \end{bmatrix} \f].
	 * \return      g		The 4 x 4 homogeneous transformation matrix (element of SE(3) represented in GL(4)).
	 */
	EXPORT_SYM Eigen::Matrix4d expm(const Eigen::Matrix4d& XiHat);

	/*!
	 * \brief The log map, specialized for SE(3) -> se(3)
	 *
	 * This method implements the matrix logarithm for SE(3). It takes 4 x 4 homogeneous transformations,
	 * which represent the Lie group SE(3) in the space of 4 x 4 matrices, and computes
	 * \f$ \log g \f$, which is a 4 x 4 twist matrix (representation of se(3)). 
	 * The logarithm is multivalued, meaning that the result is not unique.  This method returns
	 * the answer which has a rotation magnitude less than or equal to pi, and gives the zero matrix
	 * for an input at \f$ g = I \f$. This method is safe to use for any input, even those near (or exactly at) rotation
	 * angles of 0 and \f$ \pi \f$.
	 *
	 * \param[in]	g			The 4 x 4 homogeneous transformation matrix, .
	 * \return      XiHat		The 4 x 4 twist matrix, in the format \f[ \begin{bmatrix} \hat{\omega} & v \\ 0 & 0 \end{bmatrix} \f].
	 */
	EXPORT_SYM Eigen::Matrix4d log(const Eigen::Matrix4d& g);

	/*!
	 * \brief The Adjoint map, as a linear transformation
	 *
	 * This method implements the Adjoint mapping Ad(g), which gives the
	 * linear transformation corresponding to the Adjoint action \f$ g \hat{\xi} g^{-1} \f$. This operation
	 * is linear in components of \f$ \hat{\xi} \f$, and the linear transformation is given by
	 * \f[
	 *		Ad(g)*\xi = \begin{bmatrix} R & \hat{p}R \\ 0 & R \end{bmatrix}\begin{bmatrix} v \\ \omega \end{bmatrix}
	 * \f]
	 * where \f$ \xi = \text{vee6}( \hat{\xi} ) \f$. 
	 * Note that \f$ Ad(g)*\xi = \text{vee6}( g \hat{\xi} g^{-1} ) \f$.
	 *
	 * \param[in]	g			The 4 x 4 homogeneous transformation matrix, .
	 * \return      Ad(g)		The 6 x 6 Adjoint matrix.
	 */
	EXPORT_SYM Eigen::Matrix<double,6,6> Adjoint(const Eigen::Matrix4d& g);

	/*!
	 * \brief Turn a 3x3 rotation matrix into its 4x4 homogeneous representation.
	 *
	 * Packs a 3x3 rotation into a 4x4 element of SE(3) with zero translation part.
	 *
	 *
	 * \param[in]	R			The rotation matrix.
	 * \return      T		    The homogeneous transformation.
	 */
	EXPORT_SYM Eigen::Matrix4d MakeHomogeneous(const Eigen::Matrix3d& R);
}

/*! @} End of Doxygen Group */
